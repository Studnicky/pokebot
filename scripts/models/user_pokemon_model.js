module.exports = function(sequelize, Sequelize) {

	var User_Pokemon;
	User_Pokemon = sequelize.define('User_Pokemon', {
		caught_by: {
			type: Sequelize.STRING,
			allowNull: false,
			hasComment: {type: Sequelize.STRING, field: "Unique user ID generated by Slack"},
			fieldWithUnderscores: { type: Sequelize.STRING, field: "slack_id" }
		},
		exp: {
			type: Sequelize.BIGINT,
			allowNull: false,
			hasComment: {type: Sequelize.STRING, field: "Pokemon current experience"}
		},
		gender: {
			type: Sequelize.INTEGER,
			allowNull: false,
			hasComment: {type: Sequelize.STRING, field: "Pokemon current experience"}
		},
		happiness: {
			type: Sequelize.INTEGER,
			allowNull: false,
			hasComment: {type: Sequelize.STRING, field: "Pokemon variable happiness rating"},
		},
		holds_item: {
			type: Sequelize.JSON,
			allowNull: true,
			hasComment: {type: Sequelize.STRING, field: "Item held by pokemon"},
			fieldWithUnderscores: { type: Sequelize.STRING, field: "item_json" }
		},
		individual_values: {
			type: Sequelize.JSON,
			allowNull: true,
			hasComment: {type: Sequelize.STRING, field: "Pokemon individual values as JSON"},
			fieldWithUnderscores: { type: Sequelize.STRING, field: "iv_json" }
		},
		nature: {
			type: Sequelize.JSON,
			allowNull: true,
			hasComment: {type: Sequelize.STRING, field: "Pokemon nature as JSON"},
			fieldWithUnderscores: { type: Sequelize.STRING, field: "nature_json" }
		},
		national_id: {
			type: Sequelize.INTEGER,
			allowNull: false,
			hasComment: {type: Sequelize.STRING, field: "Unique Pokedex ID (National index)"},
			fieldWithUnderscores: { type: Sequelize.STRING, field: "pokedex_id" }
		},
		nickname: {
			type: Sequelize.STRING,
			allowNull: false,
			hasComment: {type: Sequelize.STRING, field: "Pokemon nickname"}
		},
		owner_id: {
			type: Sequelize.STRING,
			primaryKey: true,
			allowNull: false,
			hasComment: {type: Sequelize.STRING, field: "Unique user ID generated by Slack"},
			fieldWithUnderscores: { type: Sequelize.STRING, field: "owner_id" }
		},
		party_position: {
			type: Sequelize.INTEGER,
			primaryKey: true,
			allowNull: false,
			hasComment: {type: Sequelize.STRING, field: "Unique user ID generated by Slack"},
			fieldWithUnderscores: { type: Sequelize.STRING, field: "party_position" }
		},
		for_trade: {
			type: Sequelize.BOOLEAN,
			allowNull: false,
			hasComment: {type: Sequelize.STRING, field: "Is this pokemon available for trade?"},
			fieldWithUnderscores: { type: Sequelize.STRING, field: "for_trade" }
		},
		been_traded: {
			type: Sequelize.BOOLEAN,
			allowNull: false,
			hasComment: {type: Sequelize.STRING, field: "Has this pokemon been traded before?"},
			fieldWithUnderscores: { type: Sequelize.STRING, field: "been_traded" }
		},
		for_sale: {
			type: Sequelize.BOOLEAN,
			allowNull: false,
			hasComment: {type: Sequelize.STRING, field: "Is this pokemon available for sale?"},
			fieldWithUnderscores: { type: Sequelize.STRING, field: "for_sale" }
		},
		been_sold: {
			type: Sequelize.BOOLEAN,
			allowNull: false,
			hasComment: {type: Sequelize.STRING, field: "Is this pokemon available for trade?"},
			fieldWithUnderscores: { type: Sequelize.STRING, field: "been_sold" }
		}
	},
	{
		tableName: 'user_pokemon',
		deletedAt: 'deleted_at',
		paranoid: true,
		freezeTableName: true,
		underscored: true,
		underscoredAll: true,
		classMethods: {
			associate: function(models) {
				User_Pokemon.belongsTo(models.User, {foreignKey: 'owner_id', targetKey: 'slack_id', as: 'current_owner'});
				User_Pokemon.belongsTo(models.User, {foreignKey: 'caught_by', targetKey: 'slack_id', as: 'original_owner'});
				User_Pokemon.belongsTo(models.Pokemon, {foreignKey: 'national_id', targetKey: 'national_id', as: 'pokedex_id'});
			},
		}
	});

return User_Pokemon;
};